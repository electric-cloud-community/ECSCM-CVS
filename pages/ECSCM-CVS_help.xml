<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta content="text/html; charset=us-ascii"
          http-equiv="content-type" />
    <link rel="stylesheet"
          href="../../plugins/@PLUGIN_KEY@/pluginhelp.css"
          type="text/css"
          media="screen" />

    <title>Electric Commander Plugin for CVS</title>

    <title>CVS Help</title>
    <link rel="StyleSheet"
          href="../../plugins/ECSCM-CVS/pluginhelp.css"
          type="text/css"
          media="screen" />
</head>

<body>
    <div class="help">
        <h1>CVS</h1>

        <p>Plugin Version @PLUGIN_VERSION@</p>
        <hr style="margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; color: #5981BD;"
            noshade="noshade" />

        <p>The Concurrent Versions System (CVS), also known as the
        Concurrent Versioning System, is a client-server free
        software revision control system in the field of software
        development. Version control system software keeps track of
        all work and all changes in a set of files, and allows
        several developers (potentially widely separated in space
        and/or time) to collaborate.</p>

        <h2>CVS Links</h2>

        <p>More information can be found at:</p>

        <ul>
            <li>
            <a href="http://www.nongnu.org/cvs/#documentation">CVS
            technical documentation</a></li>
        </ul>

        <h2>Electric Commander Integration to CVS</h2>

        <p>The ECSCM-CVS plugin allows you to connect the CVS
        source control server to ElectricCommander. This plugin
        enables you to perform code checkouts, preflight build, and
        continuous integration.</p>

        <h2>Integrated Version</h2>

        <p>This plugin was developed and tested with CVS version
        1.12.13.</p>

        <h1>Plugin Procedures</h1>

        <p>IMPORTANT: For all parameter descriptions below,
        required parameters are shown in
        <span class='required'>bold italics</span>.</p>

        <h2>Plugin Configuration</h2>

        <p>Plugin configurations are sets of parameters that apply
        across some or all of the plugin's procedures. They are
        intended to reduce repetition of common values, create
        predefined sets of parameters for end users, and to
        securely store credentials where needed. Each configuration
        is given a unique name that is entered in designated
        parameters on procedures that use them.<br />
         Plugin configurations are created by going to the Electric
        Commander "Administration" tab, then to the "Source
        Control" sub-tab where is the configuration panel.</p>

        <div id="CreateConfiguration">
            <a name='CreateConfiguration'
                 id="CreateConfiguration"></a> 

            <h3>Create Configuration</h3>

            <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>

                        <th>Description</th>
                    </tr>
                </thead>

                <tbody>
                    <tr>
                        <td class='required'>Configuration
                        Name</td>

                        <td>Provide a unique name for the
                        configuration, keeping in mind that you may
                        need to create additional configurations
                        over time. (Required)</td>
                    </tr>

                    <tr>
                        <td>Description</td>

                        <td>You can supply a text description only
                        for your reference. Commander does not use
                        this information.</td>
                    </tr>

                    <tr>
                        <td>User Name</td>

                        <td>Provide the user name Commander uses to
                        communicate with the CVS server.</td>
                    </tr>

                    <tr>
                        <td>Passwords</td>

                        <td>Password and Retype Password: Provide
                        the password for the specified User
                        Name.</td>
                    </tr>

                    <tr>
                        <td class='required'>Protocol</td>

                        <td>Set the protocol to communicate with
                        CVS. (Required)</td>
                    </tr>

                    <tr>
                        <td class='required'>Server Name</td>

                        <td>Provide the name of the host machine to
                        impersonate. (Required)</td>
                    </tr>

                    <tr>
                        <td class='required'>Server Path</td>

                        <td>Provide the path to the repository
                        relative to the server name.
                        (Required)</td>
                    </tr>
                </tbody>
            </table><img src="../../plugins/@PLUGIN_KEY@/images/Config.png"
                 alt="screenshot" />
        </div>

        <h2>Plugin Procedures</h2>

        <div id="CheckoutCode">
            <a name='CheckoutCode'
                 id="CheckoutCode"></a> 

            <h3>CheckoutCode</h3>

            <p>Download a private copy of the last version of the
            project, ie a working copy in our computer. This is the
            first step we must do at the beginning of the job
            session with CVS.</p>

            <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>

                        <th>Description</th>
                    </tr>
                </thead>

                <tbody>
                    <tr>
                        <td class='required'>Configuration</td>

                        <td>Provide the name of a saved SCM
                        configuration. (Required)</td>
                    </tr>

                    <tr>
                        <td class='required'>Destination
                        Directory</td>

                        <td>Provide the path where the checked in
                        files will be downloaded. (Required)</td>
                    </tr>

                    <tr>
                        <td class='required'>Module</td>

                        <td>Provide the name of the CVS module to
                        get. (Required)</td>
                    </tr>

                    <tr>
                        <td>Revision</td>

                        <td>Check out revision or tag.</td>
                    </tr>
					<tr>
                        <td>Run Quietly</td>

                        <td>If checked the command will be really quiet; the command will only generate output for serious problems. This option can alleviate some problems that come up when a large number of files are checked out, so if the log is too big and the procedure shows problems it is recommended  to run the procedure with this option.</td>
                    </tr>
                </tbody>
            </table><img src="../../plugins/@PLUGIN_KEY@/images/Checkout.png"
                 alt="screenshot" />
        </div>

        <div id="getSCMTag">
            <a name="getSCMTag"
                 id="getSCMTag"></a> 

            <h3>Sentry Schedule</h3>

            <p>This procedure is used for Continuous Integration.
            This will monitor the repository to discover whether
            something changed, and trigger a preconfigured
            procedure.</p>

            <table class='grid'>
                <thead>
                    <tr>
                        <th>Parameter</th>

                        <th>Description</th>
                    </tr>
                </thead>

                <tbody>
                    <tr>
                        <td class='required'>Working directory</td>

                        <td>The CVS workspace that points to the
                        repository. (Required)</td>
                    </tr>

                    <tr>
                        <td class='required'>Module</td>

                        <td>Provide the name of the CVS module to
                        get. (Required)</td>
                    </tr>

                    <tr>
                        <td>Quiet time minutes</td>

                        <td>The number of minutes of no check-in
                        activity required before launching the
                        procedure.</td>
                    </tr>

                    <tr>
                        <td>Enabled for ElectricSentry</td>

                        <td>Enable this schedule for
                        ElectricSentry.</td>
                    </tr>
                </tbody>
            </table><img src="../../plugins/@PLUGIN_KEY@/images/Sentry.png"
                 alt="screenshot" />
        </div>

        <div id="Preflight">
            <a name='Preflight'
                 id="Preflight"></a> 

            <h3>Preflight (agent side)</h3>

            <p>This will execute the agent side of the
            preflight.</p>

            <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>

                        <th>Description</th>
                    </tr>
                </thead>

                <tbody>
                    <tr>
                        <td class='required'>Configuration
                        Name</td>

                        <td>The name of a saved SCM configuration.
                        (Required)</td>
                    </tr>

                    <tr>
                        <td class='required'>Destination
                        Directory</td>

                        <td>A path relative to the job's workspace,
                        where the source tree will be created.
                        (Required)</td>
                    </tr>
                </tbody>
            </table><img src="../../plugins/@PLUGIN_KEY@/images/PreflightAgent.png"
                 alt="screenshot" />
        </div>

        <div id="cpf_driver">
            <a name="cpf_driver"
                 id="cpf_driver"></a> 

            <h3>Preflight (client side)</h3>

            <p>This will execute the client part of the
            preflight.</p>

            <p>This parameters can be set in the .preflight file,
            or passed directly to the ecclientpreflight tool.</p>

            <table class='grid'>
                <thead>
                    <tr>
                        <th>Parameter</th>

                        <th>Description</th>
                    </tr>
                </thead>

                <tbody>
                    <tr>
                        <td class="required">cvsroot</td>

                        <td>The path to the repository.
                        (Required)</td>
                    </tr>

                    <tr>
                        <td class="required">module</td>

                        <td>The module name for the preflight.
                        (Required)</td>
                    </tr>

                    <tr>
                        <td class="required">workdir</td>

                        <td>The developer's source directory.
                        (Required)</td>
                    </tr>
                </tbody>
            </table>
            <pre>
<br />&lt;?xml version="1.0" encoding="utf-8"?&gt;<br />&lt;data&gt;<br />    &lt;server&gt;<br />        &lt;hostName&gt;chronic4&lt;/hostName&gt;<br />        &lt;userName&gt;admin&lt;/userName&gt;<br />        &lt;password&gt;changeme&lt;/password&gt;<br />    &lt;/server&gt;<br />        
    &lt;procedure&gt;<br />        &lt;projectName&gt;CVS&lt;/projectName&gt;<br />        &lt;procedureName&gt;Master&lt;/procedureName&gt;<br />    &lt;/procedure&gt;<br />    &lt;scm&gt;<br />        &lt;type&gt;ECSCM-CVS&lt;/type&gt;<br />        &lt;cvsroot&gt;:pserver:build:Mbimp,vm@linplugin1:/var/lib/cvs&lt;/cvsroot&gt;<br />        &lt;module&gt;ectest&lt;/module&gt;br /&gt;
        &lt;workdir&gt;/tmp/test&lt;/workdir&gt;<br />    &lt;/scm&gt;<br />&lt;/data&gt;<br />                                
</pre><li><a href="../../plugins/@PLUGIN_KEY@/cvs.preflight">
            Download Sample Preflight file</a></li>
        </div>

        <h1>Examples and Use Cases</h1>

        <h2>Configure a Checkout</h2>

        <p>In the "Procedure Details" where the steps are created,
        in the "New Step" section, select the plugin link and then
        search "CVS - Checkout" and select it from the
        list.</p><img src="../../plugins/@PLUGIN_KEY@/images/Checkout1.png"
             alt="Create a checkout step" /> 

        <p>Fill the form, in this example we are using a
        configuration called "CVSConfig", a destination directory
        relative to the workspace's job folder, a module to use
        from the repository and an optional
        revision.</p><img src="../../plugins/@PLUGIN_KEY@/images/Checkout.png"
             alt="Fill the form" /> 

        <p>The procedure now should look like this one, you can run
        now.</p><img src="../../plugins/@PLUGIN_KEY@/images/Checkout3.png"
             alt="The procedure is ready to run." /> 

        <p>If everything was properly set now you shoud see
        something like
        this.</p><img src="../../plugins/@PLUGIN_KEY@/images/Checkout4.png"
             alt="The procedure result." /> 

        <p>If you see everything green, the procedure worked fine,
        so you can now take a look at the logs. If you click on the
        log, for the CheckOutMethod subprocedure "runMethod", you
        will see something like
        this.</p><img src="../../plugins/@PLUGIN_KEY@/images/Checkout5.png"
             alt="The procedure log." /> 

        <h2>Preflight</h2>

        <h3>Configuring the preflight</h3>

        <p>In the "Procedure Details" where the steps are created,
        in the "New Step" section, select the plugin link and then
        search "ECSCM-CVS - Preflight" and select it from the
        list.</p><img src="../../plugins/@PLUGIN_KEY@/images/Preflight1.png"
             alt="" /> 

        <p>Provide the CVS configuration that you want to use, we
        chose CVSConfig. Select a destination
        directory.</p><img src="../../plugins/@PLUGIN_KEY@/images/PreflightAgent.png"
             alt="" /> 

        <p>The procedure should look like
        this.</p><img src="../../plugins/@PLUGIN_KEY@/images/Preflight3.png"
             alt="" /> 

        <h3>Running the preflight</h3>

        <p>In order to run a preflight we should make changes to
        some files.<br />
         In this example we used a
        <a href="../../plugins/@PLUGIN_KEY@/images/.preflight">.preflight</a>
        file that ecclientpreflight will read in order to read the
        values in it and execute the procedure at commander.</p>

        <p>Once we have the preflight file ready we just need to
        call the "ecclientpreflight" tool from a console.<br />
         You will see how it copies all the changed files to the
        server, and launches the preflight procedure that we created
        earlier.</p><img src="../../plugins/@PLUGIN_KEY@/images/Preflight4.png"
             alt="" /> 

        <p>If you go to the commander jobs tab, you will see our
        recently launched
        job.</p><img src="../../plugins/@PLUGIN_KEY@/images/Preflight5.png"
             alt="" /> 

        <p>You can see the log file by clicking on the log
        link.</p><img src="../../plugins/@PLUGIN_KEY@/images/Preflight6.png"
             alt="" /> 

        <h2>Configuring a sentry schedule Form</h2>

        <p>In the project, select the "schedules" tab, then in the
        pop-up select the "SCM"
        type.</p><img src="../../plugins/@PLUGIN_KEY@/images/Sentry1.png"
             alt="" /> 

        <p>Select an step name, in this case we used
        "Components-sentry", also select a CVS configuration. Then
        you should select the procedure that will be run when the
        sentry is triggered. In this case we chose the project
        "CVS" and the procedure name inside the project called
        "runWithSentry", this procedure just echoes a simple "Hello
        world"
        message</p><img src="../../plugins/@PLUGIN_KEY@/images/Sentry2.png"
             alt="" /> 

        <p>After that, a new form will be shown where you should
        type our CVS working directory and the
        module.</p><img src="../../plugins/@PLUGIN_KEY@/images/Sentry3.png"
             alt="" /> 

        <p>The schedule should look like
        this.</p><img src="../../plugins/@PLUGIN_KEY@/images/Sentry4.png"
             alt="" /> 

        <p>The sentry will detect new changes and execute the
        runWithSentry procedure, in our case it just prints a
        "Hello
        World".</p><img src="../../plugins/@PLUGIN_KEY@/images/Sentry5.png"
             alt="" /> 

        <p>This is the log of the sentry monitor, it says that a
        job was started by the schedule "Components-Sentry" in the
        "CVS"
        project.</p><img src="../../plugins/@PLUGIN_KEY@/images/Sentry6.png"
             alt="" /> 

        <p>The runWithSentry job, should be visible now from the
        jobs
        tab.</p><img src="../../plugins/@PLUGIN_KEY@/images/Sentry7.png"
             alt="" /> 

        <h1>Release Notes</h1>

		<h2>@PLUGIN_KEY@ 2.0.5</h2>

        <ul>
            <li>Added new parameter 'Run Quietly' to the checkout procedure.</li>
        </ul>
		
        <h2>@PLUGIN_KEY@ 2.0.4</h2>

        <ul>
            <li>Fixed bug to ensure that the job does not end due to an 'Out Of Memory' error during checkout.</li>
        </ul>
        
        <h2>@PLUGIN_KEY@ 2.0.3</h2>

        <ul>
            <li>Fixed bug to ensure a user-provided specific revision is used during checkout.</li>
        </ul>

        <h2>@PLUGIN_KEY@ 2.0.2</h2>

        <ul>
            <li>Step chooser name cleanup (continued)</li>
        </ul>

        <h2>@PLUGIN_KEY@ 2.0.1</h2>

        <ul>
            <li>Step chooser name cleanup</li>
        </ul>

        <h2>@PLUGIN_KEY@ 2.0.0</h2>

        <ul>
            <li>Improve xml parameter panels.</li>

            <li>New help page format.</li>
            <li>Included the Preflight step.</li>
        </ul>

        <h2>@PLUGIN_KEY@ 1.0.0</h2>

        <ul>
            <li>SCM features - Sentry</li>

            <li>SCM features - Checkout</li>

            <li>SCM features - Preflight</li>
        </ul>
    </div>
</body>
</html>
